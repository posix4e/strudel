// "Custom form: ICCCCCOC" - Auto-generated by Dazzle Mode
// Tempo: 106 BPM, Key: G#
// Duration: 332s
// Sections: 4

// Load samples
await samples('github:tidalcycles/dirt-samples')

setcps(106/60/4)

// Intro pattern - atmospheric opening
const pattern0 = stack(
  note("g#6").s("sine").room(0.95).delay(0.5).gain(0.2).pan(sine.range(-0.8, 0.8)).sometimes(fast("<0.5 1 0.25>")).every(6, x => x.rev()),
  note("c#7").s("sine").fast("<1/2 1/3>").gain(0.15).pan(saw.range(-0.6,0.6)).rev().every(5, x => x.fast(0.5)),
  s("gtr:3").gain(0.25).room(0.9).pan(sine.range(-0.3,0.3)).every(3, rev).slow(2)
)

// Bridge pattern - building momentum
const pattern1 = stack(
  s("bd ~ bd ~").slow(1).gain(0.5).pan(-0.2),
  s("~ sn ~ sn").gain(0.4).room(0.3),
  s("hh*8").gain(0.2).fast("<1 2 1 3>").sometimes(x => x.s("oh")),
  note("g#1 ~ g#1 g#1~").s("sawtooth").every(3, x => x.rev()).pan(sine.range(-0.4,0.4)).gain(0.4),
  note("<[g#3,c#4,f4] [e3,g#3,c#4]>").s("square").slow(2).sometimes(rev).pan(sine.range(-0.8,0.8)).gain(0.3),
  note("g#4 d#5 c#5 d#5").s("triangle").fast(2).every(3, rev).gain(0.25).pan(-0.3),
  note("g#5 b5 d#6").s("sine").fast("<1 1/2 1>").sometimes(jux(rev)).gain(0.2).pan(0.3)
)

// Bridge pattern - more complex
const pattern2 = stack(
  s("bd ~ ~ bd").fast(1).every(2, x => x.gain(0.6).pan(0.2)).sometimes(rev),
  s("~ cp ~ cp").gain(0.4).room(0.4),
  s("hh*16").gain(0.15).sometimes(x => x.s("oh")),
  s("~ ~ perc ~").sometimes(x => x.s("tabla")).gain(0.3).pan(0.4),
  note("g#2 ~ ~ g#2").s("sawtooth").slow(1).sometimes(rev).pan(sine.range(-0.2, 0.2)).gain(0.4),
  note("<[g#3,c4,d#4] ~ [g#3,c4,f4] ~ [g#3,c#4,d#4] ~>").s("square").sometimes(slow(2)).jux(rev).gain(0.3).pan(sine.range(-0.3, 0.3)),
  note("c4 e4 g4 c5").fast(4).s("triangle").sometimes(rev).gain(0.25).pan(0.1),
  note("e5 g5 c6 e6").slow(2).s("sine").gain(0.2).pan(0.3).room(0.6)
)

// Bridge pattern - climax
const pattern3 = stack(
  s("bd ~ ~ bd*2 ~").gain(0.5).pan(-0.2).sometimes(fast("<1 1.5 0.75>").room(0.4)),
  s("~ sn ~ sn").jux(rev).sometimes(x => x.s("cp")).room(0.3).gain(0.4),
  s("hh*8").fast("<1 2 1 3>").sometimes(x => x.s("oh")).gain(0.2).pan(sine.slow(4)),
  note("g#2 ~ g#2 ~").s("sawtooth").slow(1).gain(0.4).pan(sine.range(-0.4,0.4)),
  note("c1*2").s("sine").gain(0.5).sometimes(fast(0.5)).room(0.1),
  note("<[g#3,c#4,f#4] [e3,a3,c#4] [b3,d#4,g#4]>").s("square").sometimes(slow(2)).pan(sine.range(-0.6,0.6)).gain(0.3),
  note("[c4,e4,g4,c5]").s("sine").room(0.8).gain(0.2).pan(0.3).sometimes(rev),
  s("arpy*8").note("<0 3 5 7>").gain(0.2).room(0.7).pan(sine.slow(16).range(-0.6,0.6)).jux(rev).every(3, x => x.slow(1.5))
)

// Full song sequence (looped for longer playback)
$: cat(pattern0, pattern1, pattern2, pattern3, pattern0, pattern1, pattern2, pattern3, pattern0, pattern1, pattern2, pattern3, pattern0, pattern1, pattern2, pattern3).room(0.2).gain(0.8)