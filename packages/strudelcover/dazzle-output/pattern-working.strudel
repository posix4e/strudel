// "Custom form: ICCCCCOC" - Auto-generated by Dazzle Mode (Fixed)
// Tempo: 106 BPM, Key: G#
// Duration: 332s
// Sections: 4

// Load samples
await samples('github:tidalcycles/dirt-samples')

setcps(106/60/4)

// Intro pattern - atmospheric opening
const pattern0 = stack(
  note("g#6").s("sine").room(0.95).delay(0.5).gain(0.2).pan(sine.range(-0.8, 0.8).slow(4)),
  note("c#7").s("sine").room(0.9).gain(0.15).pan(sine.slow(8)).slow(2),
  s("gtr:3").gain(0.25).room(0.9).pan(cosine.range(-0.4,0.4)).slow(2).every(3, x => x.rev())
)

// Bridge pattern - building energy
const pattern1 = stack(
  s("bd ~ ~ bd").sometimes(slow(2)).every(6, x => x.pan(-0.3)).gain(0.5),
  s("~ sn ~ sn").gain(0.4).room(0.3),
  s("hh*8").gain(0.2).fast("<1 2 1 3>").sometimes(x => x.s("oh")),
  note("g#2 ~ g#2 ~").s("sawtooth").every(3, x => x.gain(0.4)).pan(sine.range(-0.2,0.2)),
  note("<[g#4,c5,f5] [b4,e5,g#5]>").s("square").slow(2).every(3, x => x.jux(rev)).gain(0.3).pan(saw.range(-0.8,0.8)),
  note("g#3 c#4 e4 g#4").s("triangle").fast(2).sometimes(rev).gain(0.25).pan(saw.range(-0.3, 0.3)),
  note("g#5 ~ b5 ~ g#5 d#6 ~ c#6").slow(2).s("sine").every(3, jux(rev)).gain(0.2).pan(0.1)
)

// Bridge pattern - more complexity
const pattern2 = stack(
  s("bd ~ ~ bd").every(3, x => x.gain(0.6).pan("<-0.3 0.3>")).sometimes(fast(1.5)),
  s("~ cp ~ cp").gain(0.4).room(0.4),
  s("hh*16").gain(0.15).sometimes(x => x.s("oh")),
  s("~ ~ perc ~").sometimes(x => x.s("tabla")).gain(0.3).pan(0.4),
  note("g#1*2 ~ g#1").s("sawtooth").gain(0.4).pan(saw.range(-0.2, 0.2)).every(3, rev),
  note("<[g#3,c#4,f4] [d#3,g#3,c#4] [b3,e4,g4] [f#3,b3,e4]>").s("square").slow(2).every(3, rev).pan(sine.range(-0.4, 0.4)).gain(0.3),
  note("c4 e4 g4 c5").fast(4).s("triangle").sometimes(rev).gain(0.25).pan(0.1),
  s("arpy").note("<0 3 5 7>").room(0.7).delay(0.5).gain(0.2).pan(sine.slow(12)).every(3, rev)
)

// Bridge pattern - climax
const pattern3 = stack(
  s("bd ~ ~ bd bd ~ bd ~").gain(0.5).sometimes(jux(rev)).every(6, x => x.pan(sine.range(-0.3, 0.3))),
  s("~ sn ~ sn").jux(rev).sometimes(x => x.s("cp")).room(0.3).gain(0.4),
  s("hh*8").fast("<1 2 1 3>").sometimes(x => x.s("oh")).gain(0.2).pan(sine.slow(4)),
  note("g#2 ~ g#2 ~").s("sawtooth").every(6, rev).pan(sine.range(-0.8, 0.8)).gain(0.4),
  note("c1*2").s("sine").gain(0.5).sometimes(fast(0.5)).room(0.1),
  note("<[g#3,c#4,g#4] [b3,e4,g#4] [f#3,b3,e4]>").s("square").slow(2).pan(saw.range(-0.6,0.6)).gain(0.3),
  note("[c4,e4,g4,c5]").s("sine").room(0.8).gain(0.2).pan(0.3).sometimes(rev),
  s("gtr:6").room(0.6).delay(0.4).pan(sine.slow(4).range(-0.8, 0.8)).gain(0.2).sometimes(s("gtr:4"))
)

// Full song sequence (looped for longer playback)
$: cat(pattern0, pattern1, pattern2, pattern3, pattern0, pattern1, pattern2, pattern3, pattern0, pattern1, pattern2, pattern3, pattern0, pattern1, pattern2, pattern3).room(0.2).gain(0.8)